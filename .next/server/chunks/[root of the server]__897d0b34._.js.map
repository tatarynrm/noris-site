{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NORIS_PROJECTS/Noris_Work_Presentation/noris-site/configs/auth.ts"],"sourcesContent":["import { AuthOptions, User, Account, Profile, Session } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport { JWT } from \"next-auth/jwt\";  // Імпортуємо тип JWT для коректної типізації токену\r\nimport { AdapterUser } from \"next-auth/adapters\";\r\n\r\n// Типізація для користувача\r\ninterface UserProfile extends User {\r\n  id: string;\r\n  email: string;\r\n  image?: string;  // Може бути необов'язковим\r\n  provider?: string;  // Зберігаємо провайдера (наприклад, 'google')\r\n  name?: string;  // Може бути необов'язковим\r\n}\r\n\r\n// Типізація для контексту JWT\r\ninterface CustomJWT extends JWT {\r\n  id?: string;\r\n  email?: string;\r\n  image?: string | null;  // Тепер дозволяємо null для image\r\n  name?: string;\r\n}\r\n\r\nexport const authConfig: AuthOptions = {\r\n  providers: [\r\n    // Google provider\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      authorization: {\r\n        params: {\r\n          prompt: 'select_account', // Примусове запитання про вибір акаунта\r\n          access_type: \"offline\",\r\n          response_type: \"code\",\r\n          scope:'openid profile email'\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n\r\n  pages: {\r\n    signIn: '/sign-in',  // Сторінка для входу\r\n    error: '/auth-error',  // Сторінка для обробки помилок\r\n    signOut: '/sign-out',  // Сторінка для виходу\r\n  },\r\n\r\n  session: {\r\n    maxAge: 864000,  // Тривалість сесії 10 діб\r\n    updateAge: 0,    // Без оновлення сесії під час активності\r\n    strategy: \"jwt\", // Використовуємо JWT для зберігання сесії\r\n  },\r\n  \r\n  jwt: {\r\n    secret: process.env.JWT_SECRET!,  // Секрет для JWT токену\r\n    maxAge: 864000,  // Тривалість JWT 10 діб\r\n  },\r\n\r\n  callbacks: {\r\n    // // Callback для jwt\r\n    // async jwt({ token, user, account, profile, trigger }: { token: CustomJWT; user?: UserProfile; account?: Account | null; profile?: Profile; trigger?: string; }): Promise<JWT> {\r\n    //   if (user) {\r\n    //     // Зберігаємо дані користувача в токені\r\n    //     token.id = user.id;\r\n    //     token.email = user.email || ''; // Перевірка, щоб не було null\r\n    //     token.image = user.image || ''; // Перевірка, щоб не було null\r\n    //     token.name = user.name || ''; // Перевірка, щоб не було null\r\n    //   }\r\n    //   return token;  // Якщо користувача немає, повертаємо токен без змін\r\n    // },\r\n\r\n    // Callback для сесії\r\n    async session({ session, token }: { session: Session; token: JWT }): Promise<Session> {\r\n      if (!token) {\r\n        return session;  // Якщо токен закінчився, повертаємо існуючу сесію\r\n      }\r\n\r\n\r\n      // // Оновлюємо дані сесії за допомогою токену\r\n      // session.user.id = token.id as string;\r\n      // session.user.email = token.email as string;\r\n      // session.user.image = token.image as string;\r\n      // session.user.name = token.name as string;\r\n\r\n      console.log('SESSION DATA', session);\r\n      return session;\r\n    },\r\n\r\n    // Callback для редиректу\r\n    async redirect({ url, baseUrl }: { url: string; baseUrl: string }): Promise<string> {\r\n      // Якщо редирект починається з базового URL, то повертаємо його\r\n      console.log('BASE URL',baseUrl);\r\n      \r\n      if (url.startsWith(baseUrl)) {\r\n        return url;\r\n      }\r\n      // Повертаємо редирект на домашню сторінку після входу через Google\r\n      return `${baseUrl}/`;\r\n    },\r\n\r\n    // Callback для обробки входу\r\n    async signIn({ account, profile }: { account: Account | null; profile?: Profile }): Promise<boolean> {\r\n      if (account?.provider === \"google\") {\r\n        console.log('Google Profile:', profile);\r\n        console.log('Google Account:', account);\r\n      }\r\n      return true;  // Дозволяємо інші провайдери без перевірки email\r\n    },\r\n  },\r\n};\r\n\r\nexport default authConfig;\r\n"],"names":[],"mappings":";;;;AACA;;AAqBO,MAAM,aAA0B;IACrC,WAAW;QACT,kBAAkB;QAClB,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,QAAQ;oBACN,QAAQ;oBACR,aAAa;oBACb,eAAe;oBACf,OAAM;gBACR;YACF;QACF;KACD;IAED,OAAO;QACL,QAAQ;QACR,OAAO;QACP,SAAS;IACX;IAEA,SAAS;QACP,QAAQ;QACR,WAAW;QACX,UAAU;IACZ;IAEA,KAAK;QACH,QAAQ,QAAQ,GAAG,CAAC,UAAU;QAC9B,QAAQ;IACV;IAEA,WAAW;QACT,sBAAsB;QACtB,kLAAkL;QAClL,gBAAgB;QAChB,8CAA8C;QAC9C,0BAA0B;QAC1B,qEAAqE;QACrE,qEAAqE;QACrE,mEAAmE;QACnE,MAAM;QACN,wEAAwE;QACxE,KAAK;QAEL,qBAAqB;QACrB,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAoC;YAChE,IAAI,CAAC,OAAO;gBACV,OAAO,SAAU,kDAAkD;YACrE;YAGA,8CAA8C;YAC9C,wCAAwC;YACxC,8CAA8C;YAC9C,8CAA8C;YAC9C,4CAA4C;YAE5C,QAAQ,GAAG,CAAC,gBAAgB;YAC5B,OAAO;QACT;QAEA,yBAAyB;QACzB,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAoC;YAC/D,+DAA+D;YAC/D,QAAQ,GAAG,CAAC,YAAW;YAEvB,IAAI,IAAI,UAAU,CAAC,UAAU;gBAC3B,OAAO;YACT;YACA,mEAAmE;YACnE,OAAO,GAAG,QAAQ,CAAC,CAAC;QACtB;QAEA,6BAA6B;QAC7B,MAAM,QAAO,EAAE,OAAO,EAAE,OAAO,EAAkD;YAC/E,IAAI,SAAS,aAAa,UAAU;gBAClC,QAAQ,GAAG,CAAC,mBAAmB;gBAC/B,QAAQ,GAAG,CAAC,mBAAmB;YACjC;YACA,OAAO,MAAO,iDAAiD;QACjE;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file://D%3A/NORIS_PROJECTS/Noris_Work_Presentation/noris-site/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authConfig } from '@/configs/auth'\r\nimport NextAuth from 'next-auth'\r\n\r\nconst handler = NextAuth(authConfig)\r\n\r\nexport {handler as GET, handler as POST}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,iHAAA,CAAA,aAAU","debugId":null}}]
}